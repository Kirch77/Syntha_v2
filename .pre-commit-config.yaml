# Pre-commit configuration for Syntha SDK
# Ensures code quality and consistency before commits

repos:
  # Python code formatting
  - repo: https://github.com/psf/black
    rev: 23.12.1
    hooks:
      - id: black
        args: [--line-length=88]
        language_version: python3

  # Import sorting
  - repo: https://github.com/pycqa/isort
    rev: 5.13.2
    hooks:
      - id: isort
        args: [--profile=black, --line-length=88]

  # Python linting
  - repo: https://github.com/pycqa/flake8
    rev: 7.0.0
    hooks:
      - id: flake8
        args: [--max-line-length=88, --extend-ignore=E203,W503]
        additional_dependencies: [flake8-docstrings, flake8-bugbear]

  # Security scanning
  - repo: https://github.com/PyCQA/bandit
    rev: 1.7.5
    hooks:
      - id: bandit
        args: [--config=pyproject.toml, -r]
        exclude: ^tests/

  # Type checking
  - repo: https://github.com/pre-commit/mirrors-mypy
    rev: v1.8.0
    hooks:
      - id: mypy
        additional_dependencies: [types-requests]
        exclude: ^tests/

  # General file quality
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.5.0
    hooks:
      # Basic file checks
      - id: trailing-whitespace
        exclude: ^docs/
      - id: end-of-file-fixer
        exclude: ^docs/
      - id: check-yaml
        exclude: ^docs/
      - id: check-json
      - id: check-toml
      - id: check-xml
      - id: check-merge-conflict
      - id: check-case-conflict
      - id: check-symlinks
      - id: check-executables-have-shebangs
      - id: check-shebang-scripts-are-executable

      # Python specific
      - id: check-ast
      - id: check-docstring-first
      - id: debug-statements
      - id: name-tests-test
        args: [--pytest-test-first]

      # Security
      - id: detect-private-key
      - id: detect-aws-credentials

      # File size limits
      - id: check-added-large-files
        args: [--maxkb=1000]

  # YAML formatting
  - repo: https://github.com/pre-commit/mirrors-prettier
    rev: v4.0.0-alpha.8
    hooks:
      - id: prettier
        types: [yaml]
        exclude: ^docs/

  # Documentation checks
  - repo: https://github.com/pycqa/pydocstyle
    rev: 6.3.0
    hooks:
      - id: pydocstyle
        args: [--convention=google]
        exclude: ^tests/

  # Markdown linting
  - repo: https://github.com/igorshubovych/markdownlint-cli
    rev: v0.38.0
    hooks:
      - id: markdownlint
        args: [--fix]
        exclude: ^docs/

  # Local hooks for project-specific checks
  - repo: local
    hooks:
      # Fast test suite
      - id: pytest-fast
        name: Run fast tests
        entry: python -m pytest tests/ -m "not slow" --tb=short -q
        language: system
        pass_filenames: false
        always_run: true
        stages: [commit]

      # Security tests
      - id: pytest-security
        name: Run security tests
        entry: python -m pytest tests/security/ --tb=short -q
        language: system
        pass_filenames: false
        always_run: true
        stages: [commit]

      # Check for print statements in production code
      - id: no-print-statements
        name: Check for print statements
        entry: python -c "import sys; sys.exit(1 if any('print(' in line for line in open(file).readlines()) else 0)"
        language: system
        files: ^syntha/.*\.py$
        exclude: ^syntha/logging\.py$

      # Check for TODO/FIXME comments
      - id: check-todos
        name: Check for TODO/FIXME comments
        entry: grep -n "TODO\|FIXME\|XXX\|HACK"
        language: system
        files: ^syntha/.*\.py$
        exclude: ^syntha/logging\.py$

      # Validate imports
      - id: validate-imports
        name: Validate imports
        entry: python -c "import ast; import sys; [ast.parse(open(f).read()) for f in sys.argv[1:]]"
        language: system
        files: ^syntha/.*\.py$

      # Check for requirements.txt updates
      - id: requirements-txt-fixer
        name: Fix requirements.txt
        entry: python -c "
import sys
lines = []
with open('requirements-test.txt', 'r') as f:
    for line in f:
        lines.append(line.strip())
lines.sort()
with open('requirements-test.txt', 'w') as f:
    for line in lines:
        if line:
            f.write(line + '\n')
"
        language: system
        files: ^requirements-test\.txt$
        pass_filenames: false

  # License header checks
  - repo: https://github.com/Lucas-C/pre-commit-hooks
    rev: v1.5.4
    hooks:
      - id: insert-license
        files: ^syntha/.*\.py$
        args:
          - --license-filepath
          - LICENSE_HEADER.txt
          - --comment-style
          - "#"

# Global configuration
default_language_version:
  python: python3.8

# Exclude patterns
exclude: |
  (?x)^(
    \.git/|
    \.venv/|
    venv/|
    __pycache__/|
    \.pytest_cache/|
    htmlcov/|
    \.coverage|
    build/|
    dist/|
    \.egg-info/|
    node_modules/|
    docs/_site/|
    docs/vendor/
  )

# CI configuration
ci:
  autofix_commit_msg: |
    [pre-commit.ci] auto fixes from pre-commit.com hooks

    for more information, see https://pre-commit.ci
  autofix_prs: true
  autoupdate_branch: ""
  autoupdate_commit_msg: "[pre-commit.ci] pre-commit autoupdate"
  autoupdate_schedule: weekly
  skip: []
  submodules: false 