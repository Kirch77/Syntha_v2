name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .[dev]
          pip install -r requirements-test.txt

      - name: Lint with flake8
        run: |
          flake8 syntha tests --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 syntha tests --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics

      - name: Format check with black
        run: |
          black --check syntha tests

      - name: Import sorting check with isort
        run: |
          isort --check-only syntha tests

      - name: Type checking with mypy
        run: |
          mypy syntha

      - name: Security check with bandit
        run: |
          bandit -r syntha

      - name: Test with pytest
        run: |
          pytest tests/ -v --cov=syntha --cov-report=xml --cov-report=term-missing

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

      - name: Clean up test artifacts
        run: |
          git checkout -- syntha_context.db || true
          git checkout -- . || true
          git clean -fd || true

  integration-tests:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: syntha_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .[dev]
          pip install psycopg2-binary redis

      - name: Run integration tests
        env:
          POSTGRES_URL: postgresql://postgres:postgres@localhost:5432/syntha_test
          REDIS_URL: redis://localhost:6379/0
        run: |
          pytest tests/integration/ -v --cov=syntha

      - name: Clean up test artifacts
        run: |
          git checkout -- syntha_context.db || true
          git checkout -- . || true
          git clean -fd || true

  performance-tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .[dev]
          pip install pytest-benchmark

      - name: Run performance tests
        run: |
          pytest tests/performance/ -v --benchmark-only --benchmark-json=benchmark.json

      - name: Clean up uncommitted changes
        run: |
          git checkout -- syntha_context.db || true
          git checkout -- . || true
          git clean -fd || true

      - name: Store benchmark results
        uses: benchmark-action/github-action-benchmark@v1
        with:
          tool: "pytest"
          output-file-path: benchmark.json
          github-token: ${{ secrets.GITHUB_TOKEN }}
          auto-push: true

  docs:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install mkdocs mkdocs-material mkdocs-mermaid2-plugin

      - name: Build documentation
        run: |
          cd docs-new
          mkdocs build --strict

      - name: Clean up uncommitted changes
        if: github.ref == 'refs/heads/main'
        run: |
          git checkout -- syntha_context.db || true
          git checkout -- . || true
          git clean -fd || true

      - name: Deploy to GitHub Pages
        if: github.ref == 'refs/heads/main'
        run: |
          cd docs-new
          mkdocs gh-deploy --force
